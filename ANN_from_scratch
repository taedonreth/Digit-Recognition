{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5494428f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:03.116302Z",
     "iopub.status.busy": "2024-09-05T05:10:03.115785Z",
     "iopub.status.idle": "2024-09-05T05:10:03.694846Z",
     "shell.execute_reply": "2024-09-05T05:10:03.693661Z"
    },
    "papermill": {
     "duration": 0.58956,
     "end_time": "2024-09-05T05:10:03.698524",
     "exception": false,
     "start_time": "2024-09-05T05:10:03.108964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "523ea6dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:03.710030Z",
     "iopub.status.busy": "2024-09-05T05:10:03.709299Z",
     "iopub.status.idle": "2024-09-05T05:10:08.664165Z",
     "shell.execute_reply": "2024-09-05T05:10:08.662005Z"
    },
    "papermill": {
     "duration": 4.96569,
     "end_time": "2024-09-05T05:10:08.668851",
     "exception": false,
     "start_time": "2024-09-05T05:10:03.703161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc7a81a8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:08.680295Z",
     "iopub.status.busy": "2024-09-05T05:10:08.679670Z",
     "iopub.status.idle": "2024-09-05T05:10:08.721807Z",
     "shell.execute_reply": "2024-09-05T05:10:08.719302Z"
    },
    "papermill": {
     "duration": 0.052494,
     "end_time": "2024-09-05T05:10:08.725925",
     "exception": false,
     "start_time": "2024-09-05T05:10:08.673431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e80ee91b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:08.742235Z",
     "iopub.status.busy": "2024-09-05T05:10:08.741627Z",
     "iopub.status.idle": "2024-09-05T05:10:09.623314Z",
     "shell.execute_reply": "2024-09-05T05:10:09.621847Z"
    },
    "papermill": {
     "duration": 0.893392,
     "end_time": "2024-09-05T05:10:09.626718",
     "exception": false,
     "start_time": "2024-09-05T05:10:08.733326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = np.array(data)\n",
    "m, n = data.shape\n",
    "np.random.shuffle(data) # shuffle before splitting into dev and training sets\n",
    "\n",
    "data_dev = data[0:1000].T\n",
    "Y_dev = data_dev[0]\n",
    "X_dev = data_dev[1:n]\n",
    "X_dev = X_dev / 255.\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "62a550f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:09.638052Z",
     "iopub.status.busy": "2024-09-05T05:10:09.637617Z",
     "iopub.status.idle": "2024-09-05T05:10:09.653460Z",
     "shell.execute_reply": "2024-09-05T05:10:09.651983Z"
    },
    "papermill": {
     "duration": 0.025093,
     "end_time": "2024-09-05T05:10:09.656615",
     "exception": false,
     "start_time": "2024-09-05T05:10:09.631522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_params():\n",
    "    W1 = np.random.rand(10, 784) - 0.5\n",
    "    b1 = np.random.rand(10, 1) - 0.5\n",
    "    W2 = np.random.rand(10, 10) - 0.5\n",
    "    b2 = np.random.rand(10, 1) - 0.5\n",
    "    return W1, b1, W2, b2\n",
    "\n",
    "def ReLU(Z):\n",
    "    return np.maximum(Z, 0)\n",
    "\n",
    "def softmax(Z):\n",
    "    A = np.exp(Z) / sum(np.exp(Z))\n",
    "    return A\n",
    "    \n",
    "def forward_prop(W1, b1, W2, b2, X):\n",
    "    Z1 = W1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = W2.dot(A1) + b2\n",
    "    A2 = softmax(Z2)\n",
    "    return Z1, A1, Z2, A2\n",
    "\n",
    "def ReLU_deriv(Z):\n",
    "    return Z > 0\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dZ2 = A2 - one_hot_Y\n",
    "    dW2 = 1 / m * dZ2.dot(A1.T)\n",
    "    db2 = 1 / m * np.sum(dZ2)\n",
    "    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n",
    "    dW1 = 1 / m * dZ1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dZ1)\n",
    "    return dW1, db1, dW2, db2\n",
    "\n",
    "def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "    W1 = W1 - alpha * dW1\n",
    "    b1 = b1 - alpha * db1    \n",
    "    W2 = W2 - alpha * dW2  \n",
    "    b2 = b2 - alpha * db2    \n",
    "    return W1, b1, W2, b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "820f516e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:09.668602Z",
     "iopub.status.busy": "2024-09-05T05:10:09.668057Z",
     "iopub.status.idle": "2024-09-05T05:10:09.679055Z",
     "shell.execute_reply": "2024-09-05T05:10:09.677846Z"
    },
    "papermill": {
     "duration": 0.020579,
     "end_time": "2024-09-05T05:10:09.682490",
     "exception": false,
     "start_time": "2024-09-05T05:10:09.661911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_predictions(A2):\n",
    "    return np.argmax(A2, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    print(predictions, Y)\n",
    "    return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "def gradient_descent(X, Y, alpha, iterations):\n",
    "    W1, b1, W2, b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n",
    "        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "        if i % 10 == 0:\n",
    "            print(\"Iteration: \", i)\n",
    "            predictions = get_predictions(A2)\n",
    "            print(get_accuracy(predictions, Y))\n",
    "    return W1, b1, W2, b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4ac2a41c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:10:09.693775Z",
     "iopub.status.busy": "2024-09-05T05:10:09.693285Z",
     "iopub.status.idle": "2024-09-05T05:11:22.542035Z",
     "shell.execute_reply": "2024-09-05T05:11:22.540431Z"
    },
    "papermill": {
     "duration": 72.86067,
     "end_time": "2024-09-05T05:11:22.547674",
     "exception": false,
     "start_time": "2024-09-05T05:10:09.687004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:  0\n",
      "[9 7 8 ... 8 8 9] [6 6 1 ... 2 1 5]\n",
      "0.10865853658536585\n",
      "Iteration:  10\n",
      "[9 6 8 ... 8 8 7] [6 6 1 ... 2 1 5]\n",
      "0.13739024390243904\n",
      "Iteration:  20\n",
      "[9 6 6 ... 8 8 7] [6 6 1 ... 2 1 5]\n",
      "0.17\n",
      "Iteration:  30\n",
      "[6 6 8 ... 9 8 7] [6 6 1 ... 2 1 5]\n",
      "0.1998048780487805\n",
      "Iteration:  40\n",
      "[6 6 1 ... 4 8 3] [6 6 1 ... 2 1 5]\n",
      "0.26639024390243904\n",
      "Iteration:  50\n",
      "[6 6 1 ... 4 1 3] [6 6 1 ... 2 1 5]\n",
      "0.31446341463414634\n",
      "Iteration:  60\n",
      "[6 6 1 ... 4 1 3] [6 6 1 ... 2 1 5]\n",
      "0.34968292682926827\n",
      "Iteration:  70\n",
      "[6 6 1 ... 4 1 3] [6 6 1 ... 2 1 5]\n",
      "0.39551219512195124\n",
      "Iteration:  80\n",
      "[6 0 1 ... 6 1 3] [6 6 1 ... 2 1 5]\n",
      "0.44321951219512196\n",
      "Iteration:  90\n",
      "[4 0 1 ... 6 1 3] [6 6 1 ... 2 1 5]\n",
      "0.48278048780487803\n",
      "Iteration:  100\n",
      "[4 0 1 ... 6 1 3] [6 6 1 ... 2 1 5]\n",
      "0.5211463414634147\n",
      "Iteration:  110\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.5554878048780488\n",
      "Iteration:  120\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.5862682926829268\n",
      "Iteration:  130\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.6109268292682927\n",
      "Iteration:  140\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.6315121951219512\n",
      "Iteration:  150\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.6495121951219512\n",
      "Iteration:  160\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.6651219512195122\n",
      "Iteration:  170\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.6784878048780488\n",
      "Iteration:  180\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.6900975609756097\n",
      "Iteration:  190\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7015853658536585\n",
      "Iteration:  200\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7105853658536585\n",
      "Iteration:  210\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7198536585365853\n",
      "Iteration:  220\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7268780487804878\n",
      "Iteration:  230\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7339024390243902\n",
      "Iteration:  240\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.741\n",
      "Iteration:  250\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7475853658536585\n",
      "Iteration:  260\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7524146341463415\n",
      "Iteration:  270\n",
      "[4 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7576341463414634\n",
      "Iteration:  280\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7627073170731707\n",
      "Iteration:  290\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7674634146341464\n",
      "Iteration:  300\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7714878048780488\n",
      "Iteration:  310\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7765365853658537\n",
      "Iteration:  320\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7802439024390244\n",
      "Iteration:  330\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7833170731707317\n",
      "Iteration:  340\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7864390243902439\n",
      "Iteration:  350\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7898536585365854\n",
      "Iteration:  360\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7933658536585366\n",
      "Iteration:  370\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.796609756097561\n",
      "Iteration:  380\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.7992926829268293\n",
      "Iteration:  390\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.8017073170731708\n",
      "Iteration:  400\n",
      "[6 6 1 ... 2 1 3] [6 6 1 ... 2 1 5]\n",
      "0.8044634146341464\n",
      "Iteration:  410\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8065609756097561\n",
      "Iteration:  420\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8089756097560976\n",
      "Iteration:  430\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8112439024390244\n",
      "Iteration:  440\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8135853658536585\n",
      "Iteration:  450\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8153414634146341\n",
      "Iteration:  460\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.817170731707317\n",
      "Iteration:  470\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.819\n",
      "Iteration:  480\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8206829268292682\n",
      "Iteration:  490\n",
      "[6 6 1 ... 2 1 5] [6 6 1 ... 2 1 5]\n",
      "0.8222682926829268\n"
     ]
    }
   ],
   "source": [
    "W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "44908239",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-05T05:11:22.590771Z",
     "iopub.status.busy": "2024-09-05T05:11:22.590058Z",
     "iopub.status.idle": "2024-09-05T05:11:22.650724Z",
     "shell.execute_reply": "2024-09-05T05:11:22.648904Z"
    },
    "papermill": {
     "duration": 0.08649,
     "end_time": "2024-09-05T05:11:22.655926",
     "exception": false,
     "start_time": "2024-09-05T05:11:22.569436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 3 3 6 7 5 9 0 8 0 6 7 3 9 6 6 5 3 2 1 1 8 9 5 6 9 0 9 8 5 4 9 3 0 6 1 6\n",
      " 1 1 8 6 5 8 3 5 9 9 4 2 0 8 8 9 9 2 7 6 5 2 4 7 9 6 6 0 8 3 5 0 8 1 6 4 6\n",
      " 4 2 6 8 9 5 2 3 8 3 6 5 4 9 7 4 9 8 3 7 4 8 6 7 4 5 2 7 1 0 3 8 8 8 0 3 1\n",
      " 9 8 7 2 2 3 9 3 2 1 0 1 6 2 2 4 3 1 3 6 7 5 5 1 5 4 5 4 1 9 3 0 1 2 9 6 1\n",
      " 6 3 8 3 1 1 7 1 8 1 7 6 3 4 1 7 7 8 9 3 0 0 3 8 4 6 7 4 6 1 7 8 8 2 8 8 7\n",
      " 0 7 1 4 4 5 1 7 6 4 4 6 8 7 9 3 9 5 6 3 5 7 4 3 6 0 9 4 5 3 2 2 3 7 9 7 4\n",
      " 6 2 7 8 3 0 0 6 7 0 1 6 9 1 4 0 6 1 8 6 9 7 6 4 5 4 3 8 0 6 6 1 5 5 6 9 5\n",
      " 9 1 0 6 4 1 7 9 2 7 8 5 1 6 2 7 9 8 3 2 9 4 6 7 2 5 3 5 7 0 1 8 0 0 9 8 0\n",
      " 5 8 2 6 7 1 5 4 0 0 2 8 0 0 4 5 8 3 9 3 0 0 5 2 8 6 6 6 0 0 0 6 0 0 9 6 1\n",
      " 4 8 1 3 2 5 0 5 4 1 1 3 4 8 2 0 4 9 3 8 9 7 9 6 1 2 9 6 3 9 2 6 7 2 0 8 7\n",
      " 7 8 5 9 0 6 1 6 8 1 8 7 4 0 2 0 9 1 0 9 0 6 7 5 6 6 1 4 0 6 7 7 1 7 6 0 9\n",
      " 4 5 7 2 3 5 6 4 7 1 2 6 1 7 9 2 0 9 4 5 3 7 2 2 2 0 4 9 0 3 5 3 0 4 8 4 0\n",
      " 6 6 4 1 0 7 4 9 8 3 6 4 4 2 8 2 1 3 1 1 1 3 6 9 6 6 1 5 3 8 7 7 4 1 5 3 6\n",
      " 7 5 6 4 5 1 3 3 0 6 1 4 5 3 7 3 6 8 8 9 5 6 1 5 6 1 4 0 1 7 9 7 0 4 2 5 1\n",
      " 0 6 2 7 0 6 0 9 6 2 7 6 6 9 3 0 7 5 8 3 9 0 1 7 5 7 7 4 9 9 5 6 2 8 0 5 1\n",
      " 7 6 0 0 5 4 0 2 4 0 5 6 1 7 4 1 6 2 5 4 2 5 6 1 2 8 1 2 2 6 2 2 6 9 0 0 3\n",
      " 0 0 1 1 2 4 2 0 3 6 8 0 5 4 0 0 7 1 8 6 4 1 8 7 7 0 2 5 7 6 1 4 0 7 0 4 1\n",
      " 1 3 9 6 9 7 2 4 3 9 2 2 5 0 2 0 1 7 7 0 1 1 2 9 8 3 4 8 2 3 9 6 6 1 6 5 1\n",
      " 9 9 2 4 4 7 8 0 4 2 2 6 1 3 2 5 5 1 1 4 9 2 0 6 5 3 8 1 3 6 9 9 8 1 7 2 8\n",
      " 8 5 1 4 5 7 6 2 5 0 3 9 0 0 1 3 1 7 8 3 5 5 6 7 7 7 9 4 4 4 8 0 5 3 2 8 0\n",
      " 3 5 8 3 6 2 4 4 8 4 6 1 7 6 1 8 1 9 7 6 2 6 2 2 4 3 3 1 0 0 3 7 8 4 4 3 8\n",
      " 6 1 2 6 3 9 4 2 3 0 2 0 0 8 7 1 7 0 3 7 1 2 4 3 4 6 1 1 0 7 2 1 3 5 8 9 7\n",
      " 3 0 7 0 7 1 5 0 3 9 5 4 9 1 8 6 4 2 6 9 1 8 9 3 4 2 6 0 4 5 1 9 1 1 0 5 7\n",
      " 6 7 9 2 6 9 4 9 0 2 9 9 4 7 4 9 6 2 1 5 3 7 9 4 4 8 0 3 5 9 4 8 0 3 9 1 0\n",
      " 5 1 3 2 5 1 1 6 1 7 7 8 3 9 2 1 2 3 4 2 7 2 4 1 9 8 4 5 4 9 8 7 1 9 7 2 1\n",
      " 2 6 6 0 9 0 9 3 4 4 1 3 8 8 2 7 2 9 0 6 9 5 1 0 2 0 1 1 8 2 9 1 4 5 6 4 2\n",
      " 6 3 8 9 6 1 5 3 8 9 5 0 2 8 1 7 5 1 1 6 0 2 4 4 1 9 1 4 2 2 7 1 7 9 4 0 0\n",
      " 8] [6 3 3 6 7 5 9 0 8 0 4 2 3 9 6 2 2 3 2 1 1 8 9 5 6 9 0 7 5 5 4 9 2 0 0 1 6\n",
      " 1 1 8 6 5 8 5 5 9 9 4 6 0 8 5 9 9 5 7 4 9 2 7 7 9 6 5 0 1 3 5 0 5 1 6 4 6\n",
      " 4 2 6 8 4 5 2 3 8 3 6 5 4 9 7 4 9 8 8 5 4 8 6 7 4 6 2 7 2 9 3 8 8 2 0 3 1\n",
      " 9 8 7 2 2 8 9 1 2 1 0 1 6 2 2 6 3 1 3 2 7 3 5 1 5 4 5 4 1 9 5 0 1 2 9 6 1\n",
      " 6 3 8 3 1 1 7 1 8 1 7 6 3 4 1 7 7 8 9 7 0 3 3 8 4 6 7 4 6 1 7 8 8 2 8 8 7\n",
      " 0 7 1 4 4 5 1 7 6 9 4 6 8 7 9 3 7 5 6 3 5 7 4 3 6 0 9 4 5 3 2 2 8 7 9 7 4\n",
      " 6 2 2 2 3 0 0 6 7 0 1 6 7 1 4 0 6 1 8 6 4 7 6 4 5 5 3 8 0 6 6 1 5 5 6 9 5\n",
      " 9 1 7 6 4 1 7 7 2 7 6 5 1 6 2 7 9 8 3 2 9 4 6 7 3 9 3 5 9 0 1 8 0 0 9 8 0\n",
      " 2 5 2 6 7 1 5 4 5 0 6 5 0 0 4 6 5 3 9 3 0 0 5 2 8 6 6 6 0 5 0 2 0 0 4 6 1\n",
      " 4 1 1 9 2 5 0 5 4 1 1 3 4 5 2 0 9 9 3 8 9 7 9 6 1 2 7 6 3 9 5 6 7 2 0 8 7\n",
      " 7 8 5 9 0 6 1 6 7 1 2 7 4 0 2 0 9 1 0 9 9 6 8 5 9 6 1 4 0 6 7 8 1 7 6 0 9\n",
      " 9 5 9 2 3 5 6 5 9 1 5 6 1 7 9 2 0 9 4 5 3 7 2 2 2 0 4 5 0 3 3 3 0 5 8 4 0\n",
      " 2 6 4 1 0 7 4 9 8 3 6 4 4 2 8 6 1 3 1 1 8 3 6 9 6 6 1 5 7 8 7 7 4 7 5 3 6\n",
      " 7 5 6 4 5 1 2 5 0 6 1 4 5 5 7 3 6 8 8 8 5 6 7 8 6 1 4 0 7 3 4 7 0 4 2 5 1\n",
      " 0 6 2 7 0 6 0 7 6 2 7 6 6 9 8 0 7 5 8 8 9 0 1 7 6 7 7 4 9 9 8 6 2 8 0 5 1\n",
      " 7 6 0 0 5 4 9 2 4 0 5 6 1 7 4 2 6 2 5 4 2 5 6 1 2 8 1 2 6 6 2 2 6 9 0 0 3\n",
      " 0 0 5 1 0 4 2 0 8 6 1 0 5 4 0 9 7 1 8 6 4 1 3 7 7 0 6 5 7 2 1 6 0 7 0 4 1\n",
      " 1 3 4 2 9 9 2 4 9 9 2 8 8 0 2 0 1 7 7 0 1 1 3 9 5 3 9 5 2 3 9 6 6 1 6 8 1\n",
      " 7 9 2 7 4 7 8 0 4 2 2 2 1 3 1 5 5 1 1 4 9 2 6 6 3 3 1 1 8 6 7 9 8 1 7 9 5\n",
      " 8 5 1 8 8 7 2 2 5 0 5 9 0 0 1 3 1 7 3 3 8 5 6 7 7 7 9 4 4 4 8 0 5 5 3 8 5\n",
      " 3 5 8 5 6 1 4 4 8 4 6 1 7 6 1 8 1 9 7 6 2 6 3 2 4 3 8 1 0 0 3 7 8 4 9 3 8\n",
      " 6 1 2 4 3 9 4 2 8 0 2 0 6 9 9 7 7 6 3 7 8 2 4 3 4 6 1 5 0 7 2 1 3 5 8 9 7\n",
      " 3 0 7 0 7 1 3 0 3 4 5 4 4 1 5 6 4 2 6 9 2 8 0 5 4 2 6 0 4 8 1 9 1 1 0 5 7\n",
      " 6 7 9 2 6 9 4 9 0 2 3 7 4 7 4 7 6 2 1 1 5 7 9 4 4 8 0 5 8 9 4 8 0 3 9 2 0\n",
      " 5 1 3 2 8 1 1 6 1 7 7 8 2 9 2 1 2 3 4 2 7 2 4 1 9 8 4 5 4 9 8 7 1 9 5 2 1\n",
      " 2 6 6 0 9 0 7 3 4 4 1 2 8 8 2 7 2 9 0 6 7 5 1 0 2 0 1 1 8 2 9 1 2 5 6 4 2\n",
      " 2 3 8 9 6 1 5 3 8 9 5 0 5 5 1 7 2 1 1 6 5 2 4 4 1 9 1 4 2 2 7 1 7 5 4 0 0\n",
      " 2]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.817"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def make_predictions(X, W1, b1, W2, b2):\n",
    "    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, W1, b1, W2, b2):\n",
    "    current_image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    current_image = current_image.reshape((28, 28)) * 255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_image, interpolation='nearest')\n",
    "    plt.show()\n",
    "    \n",
    "dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)\n",
    "get_accuracy(dev_predictions, Y_dev)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 83.526057,
   "end_time": "2024-09-05T05:11:23.213744",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-05T05:09:59.687687",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
